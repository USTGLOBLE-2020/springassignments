1. Write a program to remove duplicate elements from the array of integers.

package com.assignment_1;

import java.util.Arrays;

public class RemoveDuplicate {
	static void removeDuplicates(int[] arrayWithDuplicates) {
		System.out.println("Array With Duplicates : ");

		for (int i = 0; i < arrayWithDuplicates.length; i++) {
			System.out.print(arrayWithDuplicates[i] + "\t");
		}

		int noOfUniqueElements = arrayWithDuplicates.length;

		for (int i = 0; i < noOfUniqueElements; i++) {
			for (int j = i + 1; j < noOfUniqueElements; j++) {

				if (arrayWithDuplicates[i] == arrayWithDuplicates[j]) {

					arrayWithDuplicates[j] = arrayWithDuplicates[noOfUniqueElements - 1];

					noOfUniqueElements--;

					j--;
				}
			}
		}

		int[] arrayWithoutDuplicates = Arrays.copyOf(arrayWithDuplicates, noOfUniqueElements);

		System.out.println();

		System.out.println("Array Without Duplicates : ");

		for (int i = 0; i < arrayWithoutDuplicates.length; i++) {
			System.out.print(arrayWithoutDuplicates[i] + "\t");
		}

		System.out.println();

	}

	public static void main(String[] args) {
		removeDuplicates(new int[] { 4, 3, 2, 4, 9, 2 });

	}
}


*********************************************************************************************************************

2. Write a program to count how many numbers of times each character appears/present in the given string.

Ex: given string = “hello word”

   Output:
     h.....1
     e.....1
     l......2
     o.....2
     w....1
     r.....1
     d...1

package com.assignment_1;

import java.util.Scanner;

public class CharacterOccurence {

	static final int MAX_CHAR = 256;

	static void getOccuringChar(String str) {
		int count[] = new int[MAX_CHAR];

		int len = str.length();

		for (int i = 0; i < len; i++)
			count[str.charAt(i)]++;

		char ch[] = new char[str.length()];
		for (int i = 0; i < len; i++) {
			ch[i] = str.charAt(i);
			int find = 0;
			for (int j = 0; j <= i; j++) {

				if (str.charAt(i) == ch[j])
					find++;
			}

			if (find == 1)
				System.out.println(str.charAt(i) + " ................" + count[str.charAt(i)]);
		}
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String str = "helloword";
		getOccuringChar(str);

	}
}

********************************************************************************************************************

3. Write a function to get largest number in the given array.

package com.assignment_1;

import java.util.Scanner;

public class LargestNumberArray {

	public static void main(String[] args) {
		int n, max;
		Scanner s = new Scanner(System.in);
		System.out.print("Enter array size : ");
		n = s.nextInt();
		int a[] = new int[n];
		System.out.println("Enter elements of array:");
		for (int i = 0; i < n; i++) {
			a[i] = s.nextInt();
		}
		max = a[0];
		for (int i = 0; i < n; i++) {
			if (max < a[i]) {
				max = a[i];
			}
		}
		System.out.println("Largrst value in an array is " + max);
	}
}

***************************************************************************************

4. Write a program to find whether a given 3 digit number is an Armstrong number or not.

package com.assignment_1;

import java.util.Scanner;

public class AmstrongOrNot {

	public static void main(String[] args) {
		int number, temp, total = 0;
		Scanner sc = new Scanner(System.in);

		System.out.println("Enter the three digit number :");

		int num = sc.nextInt();

		number = num;
		while (number != 0) {
			temp = number % 10;
			total = total + temp * temp * temp;
			number /= 10;
		}

		if (total == num)
			System.out.println(num + " is an Armstrong number");
		else
			System.out.println(num + " is not an Armstrong number");
	}
}

******************************************************************************************

5. Write a program to generate the first n terms in the series
1, 8, 27, 64, 125


package com.assignment_1;

public class FirstNTermsSeries {

	public static void main(String[] args) {

		int d, i, n = 5;

		String Nnum = "";

		for (i = 1; i <= n; i++) {

			d = i * i * i;
			Nnum = Nnum + d + " ";

		}
		System.out.println("n number series : " + Nnum);

	}

}


***********************************************************************************

6. Write a program to generate the first n prime numbers in the series
2,3,5,7,9,11,..., 17

package com.assignment_1;

public class FirstNPrimeNumberSeries {

	public static void main(String[] args) {
		int i = 0;
		int num = 0;
		String primeNumbers = "";

		for (i = 1; i <= 17; i++) {
			int counter = 0;
			for (num = i; num >= 1; num--) {
				if (i % num == 0) {
					counter = counter + 1;
				}
			}
			if (counter == 2) {
				// Appended the Prime number to the String
				primeNumbers = primeNumbers + i + " ";
			}
		}
		System.out.println("Prime numbers from 1 to 17 are :");
		System.out.println(primeNumbers);
	}
}

********************************************************************************************

7. The Goal is
to print the given pattern as follows based on the number of lines as input.
1 2 3 4 5
1 2 3 4
1 2 3
1 2
1

package com.assignment_1;

import java.util.Scanner;

public class HalfPyramidInvert {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		System.out.println("Enter the rows you want :");

		int noOfRows = sc.nextInt();

		System.out.println("Output :");
		for (int i = noOfRows; i >= 1; --i) {
			for (int j = 1; j <= i; ++j) {
				System.out.print(j + " ");
			}
			System.out.println();
		}
	}
}

*******************************************************************************************

8. Write a program to print the above pattern.
        5
      4 5 4
    3 4 5 4 3
  2 3 4 5 4 3 2
1 2 3 4 5 4 3 2 1


package com.assignment_1;

import java.util.Scanner;

public class PyramidNumberPattern {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		System.out.println("Enter the rows you want :");

		int noOfRows = sc.nextInt();

		int rowCount = 1;

		System.out.println("Output :");

		for (int i = noOfRows; i >= 1; i--) {

			for (int j = 1; j <= i * 2; j++) {
				System.out.print(" ");
			}

			for (int j = i; j <= noOfRows; j++) {
				System.out.print(j + " ");
			}

			for (int j = noOfRows - 1; j >= i; j--) {
				System.out.print(j + " ");
			}

			System.out.println();

			rowCount++;
		}
	}
}

9. Write a program to print the above pattern.

1 2 3 4 5 6 5 4 3 2 1
  1 2 3 4 5 4 3 2 1
    1 2 3 4 3 2 1
      1 2 3 2 1
        1 2 1
          1
		

package com.assignment_1;

import java.util.Scanner;

public class PyramidNumberInvert {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		System.out.println("Enter the rows you want :");

		int noOfRows = sc.nextInt();

		int rowCount = noOfRows;

		System.out.println("Output :");

		for (int i = 0; i < noOfRows; i++) {

			for (int j = 1; j <= i * 2; j++) {
				System.out.print(" ");
			}

			for (int j = 1; j <= rowCount; j++) {
				System.out.print(j + " ");
			}

			for (int j = rowCount - 1; j >= 1; j--) {
				System.out.print(j + " ");
			}

			System.out.println();

			rowCount--;
		}
	}
}

******************************************************************************************
  
10. Write a program in take 10 integer in an array and sort in ascending order.

package com.assignment_1;

import java.util.Scanner;

public class ArraySortAscending {

	public static void main(String[] args) {
		int count, temp;

		Scanner scan = new Scanner(System.in);
		System.out.print("Enter array size : ");
		count = scan.nextInt();

		int num[] = new int[count];
		System.out.println("Enter array elements :");
		for (int i = 0; i < count; i++) {
			num[i] = scan.nextInt();
		}
		scan.close();
		for (int i = 0; i < count; i++) {
			for (int j = i + 1; j < count; j++) {
				if (num[i] > num[j]) {
					temp = num[i];
					num[i] = num[j];
					num[j] = temp;
				}
			}
		}
		System.out.print("Output - Array Elements in Ascending Order : ");
		for (int i = 0; i < count - 1; i++) {
			System.out.print(num[i] + ", ");
		}
		System.out.print(num[count - 1]);
	}
}
