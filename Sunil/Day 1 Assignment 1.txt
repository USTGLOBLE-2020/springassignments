1. Write a program to remove duplicate elements from the array of integers.


public class DuplicateRemoval {
	
	public static int removeDuplicateElements(int arr[], int n){  
        if (n==0 || n==1){  
            return n;  
        }  
        int[] temp = new int[n];  
        int j = 0;  
        for (int i=0; i<n-1; i++){  
            if (arr[i] != arr[i+1]){  
                temp[j++] = arr[i];  
            }  
         }  
        temp[j++] = arr[n-1];     
        // Changing original array  
        for (int i=0; i<j; i++){  
            arr[i] = temp[i];  
        }  
        return j;  
    }  
       
    public static void main (String[] args) {  
        int arr[] = {10,20,20,30,30,40,50,50};  
        int length = arr.length; 
        System.out.println("Original Array : ");
        
        for (int i = 0; i < arr.length; i++)
        {
            System.out.print(arr[i]+"\t");
        }
        
        length = removeDuplicateElements(arr, length);  
        
        //printing array elements 
        System.out.println();
        System.out.println("Array with unique values : ");
        for (int i=0; i<length; i++)  
           System.out.print(arr[i]+"\t");  
    }  
}

=============================================================================================================================================================================================

2. Write a program to count how many numbers of times each character appears/present in the given string.

Ex: given string = “hello word”

   Output:
     h.....1
     e.....1
     l......2
     o.....2
     w....1
     r.....1
     d...1

import java.util.Scanner;

public class CharCountInString {
	
	static final int Max_Char_Count = 256;
	  
    static void GetCharacter(String str) 
    { 
        int count[] = new int[Max_Char_Count]; 
  
        int len = str.length(); 
  
        for (int i = 0; i < len; i++) 
            count[str.charAt(i)]++; 
   
        char ch[] = new char[str.length()]; 
        for (int i = 0; i < len; i++) { 
            ch[i] = str.charAt(i); 
            int find = 0; 
            for (int j = 0; j <= i; j++) { 
  
                if (str.charAt(i) == ch[j])  
                    find++;                 
            } 
  
            if (find == 1)  
                System.out.println("Count of " + 
                 str.charAt(i) + " is:" + count[str.charAt(i)]);             
        } 
    } 
    public static void main(String[] args) 
    { 
        Scanner sc = new Scanner(System.in); 
        String str = "HelloWorld!"; 
        GetCharacter(str); 
    } 
}
=============================================================================================================================================================================================
3. Write a function to get largest number in the given array.

public class LargestNumberInArray {
    static int arr[] = {10,6,22,11,96,34,108,3738}; 
    
    static int largestNumber() 
    { 
        int i; 
      
        int max = arr[0]; 
         
        for (i = 1; i < arr.length; i++) 
            if (arr[i] > max) 
                max = arr[i]; 
        return max; 
    }  
    
    public static void main(String[] args) 
    { 
        System.out.println("Largest in given array is " + largestNumber()); 
    } 
} 

=============================================================================================================================================================================================
4. Write a program to find whether a given 3 digit number is an Armstrong number or not.

public class ArmstrongNumber {
	 public static void main(String[] args) {

		 int num = 163, temp, r, result = 0;
         temp = num;
         while (temp != 0)
	     {
	            r = temp % 10;
	            result += Math.pow(r, 3);
	            temp = temp/10;
	     }

	     if(result == num)
	            System.out.println(num + " is an Armstrong number.");
	     else
	            System.out.println(num + " is not an Armstrong number.");
	    }
}

=============================================================================================================================================================================================
5. Write a program to generate the first n terms in the series
1, 8, 27, 64, 125.

public class CubicalSeriesOfNumbers {
	
	public static void main(String[] args)
	{
		int d,i,n=6;
		for (i=1;i<=n;i++)
		{
			d= (i*i*i);
			System.out.print(d+",");
		}
	}	
}

=============================================================================================================================================================================================
6. Write a program to generate the first n prime numbers in the series
2,3,5,7,9,11,..., 17

public class PrimeNumbers {
	
	public static void main(String[] args)   
	{  
		int x=0,n=0,i=1,j=1;  
		while(n<15)  
		{  
			j=1;  
			x=0;  
			while(j<=i)  
			{  
				if(i%j==0)  
					x++;  
				j++;   
			}  
			if(x==2)  
			{  
				System.out.printf("%d ",i);  
				n++;  
			}  
			i++;  
		}  
	}  
}

=============================================================================================================================================================================================

7. The Goal is
to print the given pattern as follows based on the number of lines as input.
1 2 3 4 5
1 2 3 4
1 2 3
1 2
1

public class HalfPyramidPattern {

	public static void main(String[] args) {
        int rows = 5;

        for(int i = rows; i >= 1; --i) {
            for(int j = 1; j <= i; ++j) {
                System.out.print(j + " ");
            }
            System.out.println();
        }
    }
}

=============================================================================================================================================================================================

8. Write a program to print the above pattern.
        5
      4 5 4
    3 4 5 4 3
  2 3 4 5 4 3 2
1 2 3 4 5 4 3 2 1

import java.util.Scanner;

public class FullPyramidWithNumbers {
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		System.out.println("No.of rows required:");
		int rowcount = scan.nextInt();
		int Count = 1;
		System.out.println();
		for(int i = rowcount; i >= 1; i--) {
			for(int j = 1; j <= i*2; j++) {
				System.out.print(" ");
			}
			
			for(int j = i; j <= rowcount; j++) {
				System.out.print(j+" ");
			}
			for(int j = rowcount-1; j>= i; j-- ) {
				System.out.print(j+" ");
			}
			System.out.println();
			Count++;
		}
	}
}
=============================================================================================================================================================================================
9. Write a program to print the above pattern.

1 2 3 4 5 6 5 4 3 2 1
  1 2 3 4 5 4 3 2 1
    1 2 3 4 3 2 1
      1 2 3 2 1
        1 2 1
          1

import java.util.Scanner;

public class ReversePyramid {
	    
    private static void printPattern(int num){
        for(int i = num; i >= 1; i--){
            // this loop will print the spaces after which the
            // number has to be printed
            for(int j = 1; j <= num - i; j++){
                System.out.print(" ");
            }
            // this loop will print the number ascending part
            for(int k = 1; k < i; k++){
                System.out.print(k);
            }
            // this loop will print the number descending part
            for(int l = i; l >=1; l--){
                System.out.print(l);
            }            
            System.out.println();           
        }            
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter number of rows in the pyramid (1-9) - ");
 
        int noOfRows = sc.nextInt();
        // calling method
        printPattern(noOfRows);

    }

}
=============================================================================================================================================================================================		  
10. Write a program in take 10 integer in an array and sort in ascending order.

import java.util.*;
public class AscendingOrder {
	public static void main(String[] args) 
    {
        int n, temp;
        Scanner s = new Scanner(System.in);
        System.out.print("Enter no. of elements you want in array:");
        n = s.nextInt();
        int a[] = new int[n];
        System.out.println("Enter all the elements:");
        for (int i = 0; i < n; i++) 
        {
            a[i] = s.nextInt();
        }
        for (int i = 0; i < n; i++) 
        {
            for (int j = i + 1; j < n; j++) 
            {
                if (a[i] > a[j]) 
                {
                    temp = a[i];
                    a[i] = a[j];
                    a[j] = temp;
                }
            }
        }
        System.out.print("Ascending Order:");
        for (int i = 0; i < n - 1; i++) 
        {
            System.out.print(a[i] + ",");
        }
        System.out.print(a[n - 1]);
    }

}
=============================================================================================================================================================================================	

